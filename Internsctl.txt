#!/bin/bash

# Define command version
VERSION="v0.1.0"

# Function to display help information
function display_help() {
    echo "Usage: internsctl [options] <command>"
    echo "Options:"
    echo "  --help          Display this help message"
    echo "  --version       Display the version of internsctl"
    echo "Commands:"
    echo "  cpu getinfo     Get CPU information"
    echo "  memory getinfo  Get memory information"
    echo "  user create     Create a new user"
    echo "  user list        List all regular users"
    echo "  user list --sudo-only   List users with sudo permissions"
    echo "  file getinfo     Get information about a file"
    echo "    [options]      Additional options for file getinfo"
    echo "      --size, -s          Print file size"
    echo "      --permissions, -p   Print file permissions"
    echo "      --owner, -o         Print file owner"
    echo "      --last-modified, -m Print last modified time"
}

# Function to display version information
function display_version() {
    echo "internsctl $VERSION"
}

# Function to get CPU information
function get_cpu_info() {
    lscpu
}

# Function to get memory information
function get_memory_info() {
    free
}

# Function to create a new user
function create_user() {
    if [ $# -eq 0 ]; then
        echo "Error: Missing username. Usage: internsctl user create <username>"
    else
        useradd "$1"
        echo "User $1 created successfully."
    fi
}

# Function to list users
function list_users() {
    if [ "$1" == "--sudo-only" ]; then
        getent passwd | cut -d: -f1,3,4 | awk -F: '$2 >= 1000 && $3 == 0 {print $1}'
    else
        getent passwd | cut -d: -f1
    fi
}

# Function to get file information
function get_file_info() {
    file="$1"
    size_option=false
    permissions_option=false
    owner_option=false
    last_modified_option=false

    # Parse options
    while [ "$#" -gt 1 ]; do
        case "$1" in
            --size | -s)
                size_option=true
                ;;
            --permissions | -p)
                permissions_option=true
                ;;
            --owner | -o)
                owner_option=true
                ;;
            --last-modified | -m)
                last_modified_option=true
                ;;
            *)
                echo "Error: Invalid option $1"
                exit 1
                ;;
        esac
        shift
    done

    # Check if the file exists
    if [ ! -e "$file" ]; then
        echo "Error: File $file not found."
        exit 1
    fi

    # Display file information based on options
    if [ "$size_option" = true ]; then
        stat --printf="%s" "$file"
    elif [ "$permissions_option" = true ]; then
        stat --printf="%A" "$file"
    elif [ "$owner_option" = true ]; then
        stat --printf="%U" "$file"
    elif [ "$last_modified_option" = true ]; then
        stat --printf="%y" "$file"
    else
        # Default output
        stat "$file"
    fi
}

# Main script

case "$1" in
    --help)
        display_help
        ;;
    --version)
        display_version
        ;;
    cpu)
        if [ "$2" == "getinfo" ]; then
            get_cpu_info
        else
            echo "Error: Invalid cpu command. Usage: internsctl cpu getinfo"
            exit 1
        fi
        ;;
    memory)
        if [ "$2" == "getinfo" ]; then
            get_memory_info
        else
            echo "Error: Invalid memory command. Usage: internsctl memory getinfo"
            exit 1
        fi
        ;;
    user)
        case "$2" in
            create)
                create_user "$3"
                ;;
            list)
                list_users "$3"
                ;;
            *)
                echo "Error: Invalid user command. Usage: internsctl user create <username> or internsctl user list [--sudo-only]"
                exit 1
                ;;
        esac
        ;;
    file)
        if [ "$2" == "getinfo" ]; then
            shift 2
            get_file_info "$@"
        else
            echo "Error: Invalid file command. Usage: internsctl file getinfo <file-name> [options]"
            exit 1
        fi
        ;;
    *)
        echo "Error: Invalid command. Use --help for usage information."
        exit 1
        ;;
esac
